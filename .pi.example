const express = require('express');
const fetch = require('node-fetch');
const app = express();

cryptoNames = []
cryptoPrices = []

const mercury = {
  'volatility': 0.019,
  'multiplier': 100
}
const venus = {
  'volatility': 0.003,
  'multiplier': 1
}
const mars = {
  'volatility': 0.001,
  'multiplier': 1
}
const jupiter = {
  'volatility': 0.015,
  'multiplier': 1
}
const saturn = {
  'volatility': 0.001,
  'multiplier': 1
}
const uranus = {
  'volatility': 0.005,
  'multiplier': 1
}
const neptune = {
  'volatility': 0.004,
  'multiplier': 1
}
const amerind = {
  'volatility': 0.009,
  'multiplier': 565
}
const benzar = {
  'volatility': 0.004,
  'multiplier': 13
}
const caldonia = {
  'volatility': 0.004,
  'multiplier': 16
}
const denobula = {
  'volatility': 0.007,
  'multiplier': 81
}
const eridani = {
  'volatility': 0.011,
  'multiplier': 9
}
const fahleena = {
  'volatility': 0.011,
  'multiplier': 7
}
const gelrak = {
  'volatility': 0.009,
  'multiplier': 317
}
const himaa = {
  'volatility': 0.01,
  'multiplier': 37
}
const indri = {
  'volatility': 0.016,
  'multiplier': 10
}
const jouret = {
  'volatility': 0.012,
  'multiplier': 14
}
const kesprytt = {
  'volatility': 0.013,
  'multiplier': 994
}
const ledonia = {
  'volatility': 0.012,
  'multiplier': 207
}
const maranga = {
  'volatility': 0.013,
  'multiplier': 2674
}

const fetchFunction = async () => {
  const data = await fetch('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=dogecoin%2C%20theta-fuel%2C%20leo-token%2C%200x%2C%20cardano%2C%20algorand%2C%20klay-token%2C%20kusama%2C%20wrapped-bitcoin%2C%20huobi-btc%2C%20yearn-finance%2C%20maker%2C%20ethereum%2C%20staked-ether%2C%20bitcoin-cash%2C%20binancecoin%2C%20dash%2C%20monero%2C%20aave%2C%20bitcoin&order=market_cap_desc&per_page=100&page=1&sparkline=false&price_change_percentage=false');
  const result = await data.json();
  result.map((coin) => {
    cryptoNames.push(coin.id);
    cryptoPrices.push(coin.current_price)
  })

  mercury.price = cryptoPrices[4] ? cryptoPrices[4] * mercury.multiplier : 1,
  venus.price = cryptoPrices[11] ? cryptoPrices[11] * venus.multiplier : 1,
  mars.price = cryptoPrices[12] ? cryptoPrices[12] * mars.multiplier : 1,
  jupiter.price = cryptoPrices[19] ? cryptoPrices[19] * jupiter.multiplier : 1,
  saturn.price = cryptoPrices[3] ? cryptoPrices[3] * saturn.multiplier : 1,
  uranus.price = cryptoPrices[8] ? cryptoPrices[8] * uranus.multiplier : 1,
  neptune.price = cryptoPrices[10] ? cryptoPrices[10] * neptune.multiplier : 1,
  amerind.price = cryptoPrices[14] ? cryptoPrices[14] * amerind.multiplier : 1,
  benzar.price = cryptoPrices[6] ? cryptoPrices[6] * benzar.multiplier : 1,
  caldonia.price = cryptoPrices[15] ? cryptoPrices[15] * caldonia.multiplier : 1,
  denobula.price = cryptoPrices[17] ? cryptoPrices[17] * denobula.multiplier : 1,
  eridani.price = cryptoPrices[13] ? cryptoPrices[13] * eridani.multiplier : 1,
  fahleena.price = cryptoPrices[1] ? cryptoPrices[1] * fahleena.multiplier : 1,
  gelrak.price = cryptoPrices[18] ? cryptoPrices[18] * gelrak.multiplier : 1,
  himaa.price = cryptoPrices[5] ? cryptoPrices[5] * himaa.multiplier : 1,
  indri.price = cryptoPrices[2] ? cryptoPrices[2] * indri.multiplier : 1,
  jouret.price = cryptoPrices[16] ? cryptoPrices[16] * jouret.multiplier : 1,
  kesprytt.price = cryptoPrices[7] ? cryptoPrices[7] * kesprytt.multiplier : 1,
  ledonia.price = cryptoPrices[9] ? cryptoPrices[9] * ledonia.multiplier : 1,
  maranga.price = cryptoPrices[0] ? cryptoPrices[0] * maranga.multiplier : 1
  
  const planets = { mercury, venus, mars, jupiter, saturn, uranus, neptune, amerind, benzar, caldonia, denobula, eridani, fahleena, gelrak, himaa, indri, jouret, kesprytt, ledonia, maranga };
  
  return planets
}

const coinFlip = () => {
  flip = Math.floor(Math.random() * 10)
  return flip > 4 ? true : false
}

const algo = async (planets) => {
  let num
  for (let string in planets) {
    num = (Math.random() * planets[string].volatility)
    newNum = planets[string].price * num
    flip = coinFlip()
    planets[string].price = (flip ? (newNum + planets[string].price) : (planets[string].price - newNum))
  }
  return planets;
}

let planetData;
let counter = 0;
let thirtyMin = 360;

setInterval(async () => {
  if (planetData === undefined) {
    planetData = await fetchFunction()
  } 
  planetData = await algo(planetData)
  counter++
  if (counter === thirtyMin) {
    counter = 0;
    planetData = await fetchFunction()
  }
}, 2000)

app.get('/', (req, res) => {
    res.send(planetData)
});

app.listen(5000, () => console.log('localhost:5000'));
